#!/usr/bin/python3
from sys import stderr, argv
from math import gcd


def pollards_rho(n):
    """Basic Implementation of the pollards_rho algorithm for factorization.
    The function takes an integer and returns a list of prime numbers"""
    if n <= 1:
        return [n]

    # Check divisibility by small primes first
    for prime in [2, 3, 5, 7, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]:
        if n % prime == 0:
            return [prime, n // prime]

    def f(num):
        return (num * num + 1) % n

    x, y, d = 2, 2, 1
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
    return [d, n // d]


def factorize(filename):
    """Function that factors numbers from a file into products of two
smaller numbers. Takes the filename as input."""
    try:
        with open(filename, "r") as file:
            for line in file:
                value = int(line)
                factors = pollards_rho(value)
                print("{:d}={:d}*{:d}".format(value, factors[1], factors[0]))

    except FileNotFoundError:
        stderr.write(f"File not found: {filename}\n")
    except ValueError:
        stderr.write(f"Invalid input in file: {filename}\n")
    except Exception as e:
        stderr.write(f"An error occurred: {str(e)}\n")
        exit(1)


if __name__ == "__main__":
    if len(argv) != 2:
        stderr.write("Usage: ./factors filename\n")
        exit(1)

    factorize(argv[1])
