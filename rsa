#!/usr/bin/python3
from sys import stderr, argv
from math import gcd, isqrt


def is_prime(n):
    """Checks if a number is prime or not"""
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    limit = isqrt(n)
    for i in range(5, limit + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True


def pollards_rho(n):
    """Basic Implementation of the pollards_rho algorithm for factorization.
    The function takes an integer and returns a list of prime numbers"""
    if n <= 1:
        return [n]

    # Check if n is a perfect square
    if isqrt(n) ** 2 == n:
        return [isqrt(n), isqrt(n)]

    # Check divisibility by small primes first
    for prime in [2, 3, 5, 7, 13, 17, 19, 23, 29, 31, 37, 41]:
        if n % prime == 0 and is_prime(n // prime):
            return [n // prime, prime]

    def f(num):
        """Function that returns a random number"""
        return (num * num + 1) % n

    x, y, d = 2, 2, 1
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
        if is_prime(d) and is_prime(n // d):
            return [d, n // d]


def factors(filename):
    """Function that factors a number from a file into products of two
smaller numbers. Takes the filename as input."""
    try:
        with open(filename, "r") as file:
            for line in file:
                val = int(line)
                factor = pollards_rho(val)
                while not factor:
                    factor = pollards_rho(val)
                print("{:d}={:d}*{:d}".format(val, factor[0], factor[1]))

    except FileNotFoundError:
        stderr.write(f"File not found: {filename}\n")
    except ValueError:
        stderr.write(f"Invalid input in file: {filename}\n")
    except Exception as e:
        stderr.write(f"An error occurred: {str(e)}\n")
        exit(1)


if __name__ == "__main__":
    if len(argv) != 2:
        stderr.write("Usage: ./factors filename\n")
        exit(1)

    factors(argv[1])
